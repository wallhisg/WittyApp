#======================================================================
# select which tools to use as compiler, 
# librarian and linker
#======================================================================
# 		CFLAGS
#======================================================================
# CFLAGS	+= -std=c99 
CFLAGS 		+= -Wall -O1 -Os -Werror
CFLAGS		+= -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#======================================================================
# 		CXXFLAGS
#======================================================================
CXXFLAGS	+= -std=c++11
CXXFLAGS	+= -Wall -O2
#======================================================================
# select which tools to use as compiler, librarian and linker
#======================================================================
AR = ar
ARFLAGS = rv
#======================================================================
# 	libraries used in this project
#======================================================================
LIBS	+= boost_regex boost_system boost_thread 
LIBS 	+= boost_filesystem boost_date_time boost_coroutine boost_context
LIBS 	+= wthttp wt 
#LIBS 	+= wtdbo wtdbosqlite3
#LIBS 	+= m crypt
#LIBS 	+= boost_signals
LIBS	:= $(addprefix -l,$(LIBS))
#LIBS 	+= -L/usr/local/lib 
LIBS	:= $(sort $(LIBS))
#======================================================================
all: checkdirs build stop-server build-program 

build: checkdirs build-obj build-external-obj remove-program 

build-obj: $(WIDGET_OBJ)
build-external-obj: $(EXTERNAL_OBJ)

build-program: $(PROGRAMS) 
#======================================================================
# build Project object, deps
#======================================================================
$(BUILD_BASE)/%.o: $(WIDGET_BASE)/%.c
	$(CC) $(CFLAGS) $(MLD_INC) -MM -MT $@ -MF $(patsubst %.o,%.deps,$@) $<
	$(CC) $(CFLAGS) $(MLD_INC) -c $< -o $@

$(BUILD_BASE)/%.o: $(WIDGET_BASE)/%.cpp
	$(CXX) $(CXXFLAGS) $(MLD_INC) -MM -MT $@ -MF $(patsubst %.o,%.deps,$@) $<
	$(CXX) $(CXXFLAGS) $(MLD_INC) -c $< -o $@

#======================================================================
# make dir
#======================================================================
checkdirs: checkdirs-local checkdirs-external
checkdirs-local: $(WIDGET_BUILD_DIR)
checkdirs-external: $(EXTERNAL_BUILD_DIR)	

$(WIDGET_BUILD_DIR):
	$(MKDIR) $@

$(EXTERNAL_BUILD_DIR):
	$(MKDIR) $@
#======================================================================
# clean
#======================================================================
clean:
	$(RMDIR) $(BUILD_BASE)

clean-program:
	$(RM) $(PROGRAMS)

remove-program: 
	@rm -rf $(PROGRAMS)
#======================================================================
# run
SOURCES			:=	sources
SOURCES_PATH	:=	$(ROOT_BASE)/$(SOURCES)/

APPROOT			:=	$(addsuffix approot, $(SOURCES_PATH))
DOCROOT			:=	$(addsuffix docroot, $(SOURCES_PATH))
RESOURCES 		:=	$(addsuffix resources, $(SOURCES_PATH))

run: $(PROGRAMS)
	$< --http-address 0.0.0.0 --http-port 8080 --docroot=$(DOCROOT) --approot=$(APPROOT) --resources-dir=$(RESOURCES)

run-mem: $(PROGRAMS)
	valgrind --leak-check=full --show-leak-kinds=all --log-file="logfile.out" -v $< --http-address 0.0.0.0 --http-port 8080 --docroot=$(DOCROOT) --approot=$(APPROOT) --resources-dir=$(RESOURCES)
#======================================================================
# stop server
#======================================================================
stop-server:
	@sh StopServer.sh $(PROGRAMS)

ifneq ($(filter clean,$(MAKECMDGOALS)),clean)
-include $(WIDGET_DEP)
endif

